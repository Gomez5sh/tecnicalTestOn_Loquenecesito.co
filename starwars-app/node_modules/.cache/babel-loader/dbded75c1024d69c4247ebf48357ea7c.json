{"ast":null,"code":"var _jsxFileName = \"/home/gomez5sh/Documentos/Code/tecnicalTestOn_Loquenecesito.co/starwars-app/src/components/Home/CharacterList.js\";\nimport React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nconst ALL_CHARACTERS = gql`\n  {\n    allPeople {\n      people {\n        name\n        gender\n        birthYear\n        homeworld {\n          name\n        }\n        hairColor\n        height\n        filmConnection {\n          films {\n            title\n            director\n            producers\n            openingCrawl\n            releaseDate\n          }\n        }\n      }\n    }\n  }\n`;\nexport const CharacterList = A => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(ALL_CHARACTERS);\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 23\n    }\n  }, \"Loadin ...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }, \"Upps .... something is wrong!\");\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Star Wars App\"), data.ALL_CHARACTERS.map((people, id) => {\n    /*#__PURE__*/\n    React.createElement(\"p\", {\n      key: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, people.name);\n  }));\n};","map":{"version":3,"sources":["/home/gomez5sh/Documentos/Code/tecnicalTestOn_Loquenecesito.co/starwars-app/src/components/Home/CharacterList.js"],"names":["React","useQuery","gql","ALL_CHARACTERS","CharacterList","A","loading","error","data","map","people","id","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AAEA,MAAMC,cAAc,GAAGD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;CAA3B;AA0BA,OAAO,MAAME,aAAa,GAAIC,CAAD,IAAO;AAClC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACE,cAAD,CAAzC;AAEA,MAAIG,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAP;AAEX,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEGC,IAAI,CAACL,cAAL,CAAoBM,GAApB,CAAwB,CAACC,MAAD,EAASC,EAAT,KAAgB;AACvC;AAAA;AAAG,MAAA,GAAG,EAAEA,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaD,MAAM,CAACE,IAApB;AACD,GAFA,CAFH,CADF;AAQD,CAdM","sourcesContent":["import React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\n\nconst ALL_CHARACTERS = gql`\n  {\n    allPeople {\n      people {\n        name\n        gender\n        birthYear\n        homeworld {\n          name\n        }\n        hairColor\n        height\n        filmConnection {\n          films {\n            title\n            director\n            producers\n            openingCrawl\n            releaseDate\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const CharacterList = (A) => {\n  const { loading, error, data } = useQuery(ALL_CHARACTERS);\n\n  if (loading) return <p>Loadin ...</p>;\n  if (error) return <p>Upps .... something is wrong!</p>;\n\n  return (\n    <>\n      <h2>Star Wars App</h2>\n      {data.ALL_CHARACTERS.map((people, id) => {\n        <p key={id}>{people.name}</p>;\n      })}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}