{"ast":null,"code":"var _jsxFileName = \"/home/gomez5sh/Documentos/Code/tecnicalTestOn_Loquenecesito.co/starwars-app/src/components/Home/CharacterList.js\";\nimport React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nconst ALL_CHARACTERS = gql`{\n  {\n    allPeople{\n      people {\n        name\n        birthYear\n        filmConnection{\n          pageInfo {\n            startCursor\n            endCursor\n          }\n          \n        }\n      }\n    }\n  }\n}`;\nexport const CharacterList = A => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(ALL_CHARACTERS);\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 23\n    }\n  }, \"Loadin ...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 21\n    }\n  }, \"Upps .... something is wrong!\");\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, data.ALL_CHARACTERS.map((people, id) => {\n    /*#__PURE__*/\n    React.createElement(\"li\", {\n      key: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }\n    }, people.name);\n  })));\n};","map":{"version":3,"sources":["/home/gomez5sh/Documentos/Code/tecnicalTestOn_Loquenecesito.co/starwars-app/src/components/Home/CharacterList.js"],"names":["React","useQuery","gql","ALL_CHARACTERS","CharacterList","A","loading","error","data","map","people","id","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AAEA,MAAMC,cAAc,GAAGD,GAAI;;;;;;;;;;;;;;;;EAA3B;AAkBA,OAAO,MAAME,aAAa,GAAIC,CAAD,IAAO;AAClC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACE,cAAD,CAAzC;AAEA,MAAIG,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAP;AAEX,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACL,cAAL,CAAoBM,GAApB,CAAwB,CAACC,MAAD,EAASC,EAAT,KAAgB;AACvC;AAAA;AAAI,MAAA,GAAG,EAAEA,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAcD,MAAM,CAACE,IAArB;AACD,GAFA,CADH,CADF,CADF;AASD,CAfM","sourcesContent":["import React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\n\nconst ALL_CHARACTERS = gql`{\n  {\n    allPeople{\n      people {\n        name\n        birthYear\n        filmConnection{\n          pageInfo {\n            startCursor\n            endCursor\n          }\n          \n        }\n      }\n    }\n  }\n}`;\n\nexport const CharacterList = (A) => {\n  const { loading, error, data } = useQuery(ALL_CHARACTERS);\n\n  if (loading) return <p>Loadin ...</p>;\n  if (error) return <p>Upps .... something is wrong!</p>;\n\n  return (\n    <>\n      <li>\n        {data.ALL_CHARACTERS.map((people, id) => {\n          <li key={id}>{people.name}</li>;\n        })}\n      </li>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}